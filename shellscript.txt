echo "Total number of command line argument are $#"
echo "$0 is script name"
echo "$1 is first argument"
echo $2 is second argument"
echo "All of argumnet are :- $*"
$@ gives all parameter pass in 

When we pass the command line argument in double quotes("c d"), the $* does not consider them as a single entity, and splits them. However, the $@ considers them as a single entity and hence the 3rd echo statement shows "c d" together. This is the difference between $* and $@.


$ echo $?
It will print 0 to indicate command is successful.

Operator Meaning
! expression Logical NOT
expression1 -a expression2 Logical AND
expression1 -o expression2 Logical OR


Test Meaning
-s file Non empty file
-f file Is File exist or normal file and not a directory
-d dir Is Directory exist and not a file
-w file Is writeable file
-r file Is read-only file
-x file Is file is executable



if condition
then
condition is zero (true - 0)
execute all commands up to elif statement
elif condition1
condition1 is zero (true - 0)
execute all commands up to elif statement
elif condition2
condition2 is zero (true - 0)
execute all commands up to elif statement
Linux Shell Script Tutorial
http://www.freeos.com/guides/lsst/shellprog.htm (13 of 19) [17/08/2001 17.42.21]
else
None of the above condtion,condtion1,condtion2 are true (i.e.
all of the above nonzero or false)
execute all commands up to fi
fi



for { variable name } in { list }
do
execute one for each item in the list until the list is
not finished (And repeat all statement between do and done)
done


while [ condition ]
do
command1
command2
command3
..
....
done


$ cat > sayH
#
#Script to read your name from key-board
#
echo "Your first name please:"
read fname
echo "Hello $fname, Lets be friend!"


? Matches any single character.
For e.g. $ ls ? , will show one single letter file name, $ ls fo? , will show all files whose names are 3
character long and file name begin with fo



[...] Matches any one of the enclosed characters.
For e.g. $ ls [abc]* - will show all files beginning with letters a,b,c
[..-..] A pair of characters separated by a minus sign denotes a range;
For eg. $ ls /bin/[a-c]* - will show all files name beginning with letter a,b or c like



$ ls /bin/[!a-o]
$ ls /bin/[^a-o]
If the first character following the [ is a ! or a ^ then any character not enclosed is matched i.e. do
not show us file name that beginning with a,b,c,e...o, like



/dev/null - Use to send unwanted output of program
This is special Linux file which is used to send any unwanted output from program/command.
Syntax: command > /dev/null
For e.g. $ ls > /dev/null , output of this command is not shown on screen its send to this special file.
The /dev directory contains other device files. The files in this directory mostly represent peripheral
devices such disks liks floppy disk, sound card, line printers etc.


Conditional execution i.e. && and ||
The control operators are && (read as AND) and || (read as OR). An AND list has the
Syntax: command1 && command2
Here command2 is executed if, and only if, command1 returns an exit status of zero. An OR list has the
Syntax: command1 || command2
Here command2 is executed if and only if command1 returns a non-zero exit status. You can use both as
follows
command1 && comamnd2 if exist status is zero || command3 if exit status is non-zero
Here if command1 is executed successfully then shell will run command2 and if command1 is not
successful then command3 is executed. For e.g.
$ rm myf && echo File is removed successfully || echo File is not removed
If file (myf) is removed successful (exist status is zero) then "echo File is removed successfully" statement
is executed, otherwise "echo File is not removed" statement is executed (since exist status is non-zero)